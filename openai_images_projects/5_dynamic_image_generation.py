# Exercise 6 - https://chatgpt.com/c/66f60116-7f44-800c-9d44-f39ed9d91833 - Advanced OpenAI Image Project: "Dynamic Image Generation with User Input and Post-Processing Effects"

import os
import uuid
import requests
import certifi
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont, ImageOps
from openai import OpenAI
from apikey import apikey  # assuming you have an apikey.py file that stores the key

# Set up the OpenAI API key
os.environ['OPENAI_API_KEY'] = apikey
OpenAI.api_key = apikey
client = OpenAI()

# User input for prompt and processing options
prompt = input("Enter your image description: ")
apply_watermark = input("Do you want to add a watermark? (yes/no): ").lower() == "yes"

# Generate image from user input prompt
response = client.images.generate(
    model="dall-e-3",
    prompt=prompt,
    size="1024x1024",
    n=1
)

# Fetch the generated image
image_url = response.data[0].url
image_response = requests.get(image_url, verify=certifi.where())
image_file = Image.open(BytesIO(image_response.content))

# Generate a random UUID for the image file
guid = uuid.uuid4()

# Create the directory for the images
output_directory = f"images/{guid}/"
os.makedirs(output_directory, exist_ok=True)

# Save original image with UUID
original_filename = f"generated_image_{guid}.png"
image_file.save(output_directory+original_filename)
image_file.show()
print(f"Original image saved as {original_filename}")

# Apply post-processing (grayscale, resizing, watermark) other example of image processing are listed here: https://chatgpt.com/c/67077081-4a8c-800c-8254-91875cf5c626 (public: https://chatgpt.com/share/67077134-4eec-800c-a2fc-7210daad4c77)
def apply_effects(image, category):
    # Convert to grayscale
    grayscale_image = ImageOps.grayscale(image)
    grayscale_filename = f"{category}_grayscale_{guid}.png"
    grayscale_image.save(output_directory+grayscale_filename)
    grayscale_image.show()
    print(f"Grayscale image saved as {grayscale_filename}")

    # Resize for different dimensions (e.g., thumbnails)
    resized_image = image.resize((512, 512))
    resized_filename = f"{category}_resized_{guid}.png"
    resized_image.save(output_directory+resized_filename)
    resized_image.show()
    print(f"Resized image saved as {resized_filename}")

    # fit crop and resize
    fit_image = ImageOps.fit(image, (100, 100))
    fit_filename = f"{category}_fit_{guid}.png"
    fit_image.save(output_directory + fit_filename)
    fit_image.show()

    # Add watermark (if user requested)
    if apply_watermark:
        watermark_text = "Generated by OpenAI"
        draw = ImageDraw.Draw(image)
        font = ImageFont.load_default()  # Using default font, can be customized
        #textwidth, textheight = draw.textsize(watermark_text, font)
        #textwidth, textheight = font.getsize(watermark_text)
        bbox = font.getbbox(watermark_text)
        textwidth, textheight = bbox[2] - bbox[0], bbox[3] - bbox[1]
        width, height = image.size
        # Position the watermark at-the bottom-right corner
        x = width - textwidth - 10
        y = height - textheight - 10
        draw.text((x, y), watermark_text, font=font, fill="white")

        watermarked_filename = f"{category}_watermarked_{guid}.png"
        image.save(output_directory+watermarked_filename)
        image.show()
        print(f"Watermarked image saved as {watermarked_filename}")

# Apply effects to the generated image
apply_effects(image_file, "generated_image")

print("All processing is complete.")